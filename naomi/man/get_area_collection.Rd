% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/areas.R
\name{get_area_collection}
\alias{get_area_collection}
\title{Get a collection of areas}
\usage{
get_area_collection(areas, level = NULL, area_scope = NULL)
}
\arguments{
\item{areas}{Data frame representing a valid area hierarchy.}

\item{level}{The level to return area collection}

\item{area_scope}{\code{area_id}s to subset return level, possible a vector.}
}
\description{
Get a collection of areas defined by a level and nested within a collection
of higher level area(s).
}
\details{
This function recursively expands the area hierarchy to identify all areas in
area_level \code{level} which are nested within areas defined by \code{area_scope}.

If \code{level = NULL} areas are returned at the lowest level of the hierarchy.
An error is thrown if \code{level} is not reflected in the hierarchy.

If \code{area_scope = NULL} all areas at area_level \code{level} are returned. In this case
the recursion is shortcut and simply filters the hierarchy to the desired
level for efficiency, but it is equivalent to initialising the recursion
at the highest level of the hierarchy.

If \code{area_scope} is not null, a column \code{area_scope} is returned indicating the
area in which each returned area is nesteed. \code{area_scope} can accept a vector
of \code{area_id}s and they do not have to be
at the same level. If the level of an area in \code{area_scope} is higher than
area_level \code{level}, nothing is returned. An error is thrown if any \code{area_scope}
are not recognized.

TODO: Should be an example - where is demo_areas, demo_area_geom?
data(demo_areas, demo_area_geom)

areas <- get_area_collection(demo_areas, level = 3, area_scope = c("MWI.1", "MWI.3.5"))
areas \%>\%
left_join(demo_area_geom \%>\% filter(type == "boundary")) \%>\%
sf::st_as_sf() \%>\%
ggplot() + geom_sf()
}
